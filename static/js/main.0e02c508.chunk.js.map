{"version":3,"sources":["components/InputForm.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["InputForm","props","state","sequence1","sequence2","matchScore","mismatchScore","gapScore","handleChange","bind","handleScoreChange","handleSubmit","e","console","log","target","id","value","this","setState","keyValueObj","preventDefault","submitInput","className","Form","onSubmit","Group","as","Row","controlId","Label","column","sm","Col","Control","size","onChange","Button","variant","type","Component","Main","displayResult","inputObj","text","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0e02c508.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Form, Button, Row, Col } from 'react-bootstrap';\nimport NumericInput from 'react-numeric-input';\nimport './InputForm.css';\n\nclass InputForm extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tsequence1: '',\n\t\t\tsequence2: '',\n\t\t\tmatchScore: 0,\n\t\t\tmismatchScore: 0,\n\t\t\tgapScore: 0,\n\t\t};\n\t\tthis.handleChange = this.handleChange.bind(this);\n\t\tthis.handleScoreChange = this.handleScoreChange.bind(this);\n\t\tthis.handleSubmit = this.handleSubmit.bind(this);\n\t}\n\n\thandleChange(e) {\n\t\tconsole.log('handleChange e.target, e.t.value: ', e.target.id, e.target.value);\n\t\tthis.setState({\n\t\t\t[e.target.id]: e.target.value\n\t\t});\n\t}\n\n\thandleScoreChange(keyValueObj) {\n\t\tconsole.log('handleScroeChange: ', keyValueObj);\n\t\tthis.setState(keyValueObj);\n\t}\n\n\thandleSubmit(e) {\n\t\tconsole.log('handleSubmit event: ', e);\n\t\te.preventDefault();\n\t\tthis.props.submitInput(this.state);\n\t}\n \n\trender() {\n\t\treturn (\n\t\t\t<div className='inputForm'>\n\t\t\t\t<Form onSubmit={this.handleSubmit}>\n\t\t\t\t\t<Form.Group as={Row} controlId=\"sequence1\">\n\t\t\t\t\t\t<Form.Label column sm={3}>Sequence 1</Form.Label>\n\t\t\t\t\t\t<Col sm={9}>\n\t\t\t\t\t\t\t<Form.Control size='sm' onChange={this.handleChange} />\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t</Form.Group>\n\t\t\t\t\t<Form.Group as={Row} controlId=\"sequence2\">\n\t\t\t\t\t\t<Form.Label column sm={3}>Sequence 2</Form.Label>\n\t\t\t\t\t\t<Col sm={9}>\n\t\t\t\t\t\t\t<Form.Control size='sm' onChange={this.handleChange} />\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t</Form.Group>\n\t\t\t\t\t<Form.Group as={Row} controlId=\"matchScore\">\n\t\t\t\t\t\t<Form.Label className='numericLabel' column sm={3}>Match Score</Form.Label>\n\t\t\t\t\t\t<Col sm={4}>\n\t\t\t\t\t\t\t<NumericInput value={this.state.matchScore} onChange={(value) => this.handleScoreChange({ matchScore: value })} />\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t</Form.Group> \n\t\t\t\t\t<Form.Group as={Row} controlId=\"mismatchScore\">\n\t\t\t\t\t\t<Form.Label className='numericLabel' column sm={3}>Mismatch Score</Form.Label>\n\t\t\t\t\t\t<Col sm={4}>\n\t\t\t\t\t\t\t<NumericInput value={this.state.mismatchScore} onChange={(value) => this.handleScoreChange({ mismatchScore: value })} />\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t</Form.Group>\n\t\t\t\t\t<Form.Group as={Row} controlId=\"gapScore\">\n\t\t\t\t\t\t<Form.Label className='numericLabel' column sm={3}>Gap Score</Form.Label>\n\t\t\t\t\t\t<Col sm={4}>\n\t\t\t\t\t\t\t<NumericInput value={this.state.gapScore} onChange={(value) => this.handleScoreChange({ gapScore: value })} />\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t</Form.Group>\n\t\t\t\t\t<Button variant=\"primary\" type=\"submit\">\n\t\t\t\t\t\tSubmit\n  \t\t\t\t\t</Button>\n\t\t\t\t</Form>\n\t\t\t</div>\n\t\t);\n\t}\n}\nexport default InputForm;\n","import React, { Component } from \"react\";\nimport InputForm from './InputForm';\n\nclass Main extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tsequence1: '',\n\t\t\tsequence2: '',\n\t\t\tmatchScore: 0,\n\t\t\tmismatchScore: 0,\n            gapScore: 0,\n            displayResult: false,\n\t\t};\n\t\tthis.submitInput = this.submitInput.bind(this);\n\t}\n\n    submitInput(inputObj) {\n        inputObj['displayResult'] = true;\n        console.log('submitInput inputObj: ', inputObj);\n        this.setState(inputObj);\n    }\n\n\trender() {\n        console.log('state in main: ', this.state);\n        console.log('displayResult: ', this.state.displayResult);\n        const text = this.state.displayResult ? 'output here' : null\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<InputForm submitInput={this.submitInput}/>\n                {text}\n\t\t\t</div>\n\t\t);\n\t}\n}\nexport default Main;\n","import React from \"react\";\nimport './App.css';\nimport './Home.css';\nimport Main from './components/Main';\n\nfunction App() {\n  const title = 'Hirschberg\\'s Algorithm Visualization';\n  return (\n    <div className=\"App\">\n      <h2 className='title'>\n        {title}\n      </h2>\n      <div className='title'>\n        <Main/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}